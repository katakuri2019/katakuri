Dfs


graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}


visited = set() # Set to keep track of visited nodes of graph.


def dfs(visited, graph, node):  #function for dfs 
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)






dfs(visited, graph, '5')






Bfs


graph = {
  '5' : ['3','7'],
  '3' : ['2', '4'],
  '7' : ['8'],
  '2' : [],
  '4' : ['8'],
  '8' : []
}


visited = [] # List for visited nodes.
queue = []     #Initialize a queue


def bfs(visited, graph, node): #function for BFS
  visited.append(node)
  queue.append(node)


  while queue:          # Creating loop to visit each node
    m = queue.pop(0) 
    print (m, end = " ") 


    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)


# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, '5')    # function calling






Tower of hanoi


def tower_of_hanoi(n, source, auxiliary, target):
   if n == 1:
       print(f"Move disk 1 from {source} to {target}")
       return
   tower_of_hanoi(n - 1, source, target, auxiliary)
   print(f"Move disk {n} from {source} to {target}")
   tower_of_hanoi(n - 1, auxiliary, source, target)

# Example usage:
n = 3  # Number of disks
tower_of_hanoi(n, 'A', 'B', 'C')




DLS


def dls(root , visited , depth , depth_limit , graph):
   if depth > depth_limit :
       return
   visited.add(root)
   print(root , end = ' ')
   for child in graph[root]:
       if child not in visited:
           dls(child , visited , depth+1 , depth_limit , graph)
      




if __name__ == "__main__":
   #Dictionary to represent the graph
   graph = {
       1:[2,3],
       2:[1,4],
       3:[1,5],
       4:[6,7,8],
       5:[],
       6:[4,9],
       7:[4,10],
       8:[],
       9:[],
       10:[]
   }

   visited = set()
   root=1
   depth = 0
   depth_limit = 3
  
   dls(root , visited , depth, depth_limit , graph)